/*
*******************************************************************************
* Copyright (c) 2021 by M5Stack
*                  Equipped with M5StickC-Plus sample source code
*                          配套  M5StickC-Plus 示例源代码
* Visit for more information: https://docs.m5stack.com/en/core/m5stickc_plus
* 获取更多资料请访问: https://docs.m5stack.com/zh_CN/core/m5stickc_plus
*
* Describe: Hello World.
* Date: 2021/9/14
*******************************************************************************
*/
#include <M5StickCPlus.h>
#include <pgmspace.h>

#define door_28x30_width 28
#define door_28x30_height 30
PROGMEM const unsigned char door_28x30_bits[] = {
   0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0x03, 0x00, 0x00, 0x0c,
   0x03, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x0c,
   0xf3, 0xff, 0xff, 0x0c, 0xf3, 0xff, 0xff, 0x0c, 0xf3, 0x00, 0x30, 0x0c,
   0xf3, 0x00, 0x30, 0x0c, 0xf3, 0xfc, 0x33, 0x0c, 0xf3, 0xfc, 0x33, 0x0c,
   0xf3, 0xfc, 0x33, 0x0c, 0xf3, 0xfc, 0x33, 0x0c, 0xf3, 0xff, 0xff, 0x0c,
   0xf3, 0xff, 0xff, 0x0c, 0xc3, 0xff, 0xff, 0x0c, 0xc3, 0xff, 0xff, 0x0c,
   0xc3, 0xff, 0xff, 0x0c, 0xc3, 0xff, 0xff, 0x0c, 0xf3, 0x00, 0xf0, 0x0c,
   0xf3, 0x00, 0xf0, 0x0c, 0xf3, 0xfc, 0x33, 0x0c, 0xf3, 0xfc, 0x33, 0x0c,
   0xf3, 0xfc, 0x33, 0x0c, 0xf3, 0xfc, 0x33, 0x0c, 0xf3, 0xff, 0x3f, 0x0c,
   0xf3, 0xff, 0x3f, 0x0c, 0xf3, 0xff, 0xff, 0x0c, 0xf3, 0xff, 0xff, 0x0c };

/* After M5StickC Plus is started or reset
  the program in the setUp () function will be run, and this part will only be
  run once. 在 M5StickC Plus
  启动或者复位后，即会开始执行setup()函数中的程序，该部分只会执行一次。 */
void setup() {
    M5.begin();  // Initialize M5StickC Plus.  初始化 M5StickC PLus
    M5.Lcd.fillScreen(TFT_BLACK);
    M5.Lcd.setTextSize(2);  // Set font size.  设置字体大小
    M5.Lcd.setRotation(3);  // Rotate the screen. 将屏幕旋转
    M5.Lcd.print("TiMiNoo M5 test");
    M5.Lcd.drawXBitmap(60, 20, door_28x30_bits, door_28x30_width, door_28x30_height, TFT_WHITE);
}

/* After the program in setup() runs, it runs the program in loop()
The loop() function is an infinite loop in which the program runs repeatedly
在setup()函数中的程序执行完后，会接着执行loop()函数中的程序
loop()函数是一个死循环，其中的程序会不断的重复运行 */
void loop() {
}
